/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PriceChangeDataStruct = {
  oldPrice: BigNumberish;
  newPrice: BigNumberish;
  longBalance: BigNumberish;
  shortBalance: BigNumberish;
  leverageAmount: BytesLike;
  fee: BytesLike;
};

export type PriceChangeDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  oldPrice: BigNumber;
  newPrice: BigNumber;
  longBalance: BigNumber;
  shortBalance: BigNumber;
  leverageAmount: string;
  fee: string;
};

export interface PoolSwapLibraryInterface extends utils.Interface {
  functions: {
    "MAX_DECIMALS()": FunctionFragment;
    "WAD_PRECISION()": FunctionFragment;
    "calculatePriceChange((int256,int256,uint256,uint256,bytes16,bytes16))": FunctionFragment;
    "compareDecimals(bytes16,bytes16)": FunctionFragment;
    "convertDecimalToUInt(bytes16)": FunctionFragment;
    "convertUIntToDecimal(uint256)": FunctionFragment;
    "divInt(int256,int256)": FunctionFragment;
    "fromWad(uint256,uint256)": FunctionFragment;
    "getBalancesAfterFees(uint256,uint256,uint256)": FunctionFragment;
    "getLossAmount(bytes16,uint256)": FunctionFragment;
    "getLossMultiplier(bytes16,int8,bytes16)": FunctionFragment;
    "getMintAmount(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getRatio(uint256,uint256)": FunctionFragment;
    "getWithdrawAmountOnBurn(uint256,uint256,uint256,uint256)": FunctionFragment;
    "isBeforeFrontRunningInterval(uint256,uint256,uint256,uint256)": FunctionFragment;
    "multiplyDecimalByUInt(bytes16,uint256)": FunctionFragment;
    "one()": FunctionFragment;
    "zero()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WAD_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePriceChange",
    values: [PriceChangeDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "compareDecimals",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDecimalToUInt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertUIntToDecimal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divInt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fromWad",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancesAfterFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLossAmount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLossMultiplier",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintAmount",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawAmountOnBurn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBeforeFrontRunningInterval",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplyDecimalByUInt",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "one", values?: undefined): string;
  encodeFunctionData(functionFragment: "zero", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WAD_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePriceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDecimalToUInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertUIntToDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "divInt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fromWad", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalancesAfterFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLossAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLossMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawAmountOnBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBeforeFrontRunningInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplyDecimalByUInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "one", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zero", data: BytesLike): Result;

  events: {};
}

export interface PoolSwapLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolSwapLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    WAD_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePriceChange(
      priceChange: PriceChangeDataStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fromWad(
      _wadValue: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalancesAfterFees(
      reward: BigNumberish,
      shortBalance: BigNumberish,
      longBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWithdrawAmountOnBurn(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isBeforeFrontRunningInterval(
      subjectTime: BigNumberish,
      lastPriceTimestamp: BigNumberish,
      updateInterval: BigNumberish,
      frontRunningInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    one(overrides?: CallOverrides): Promise<[string]>;

    zero(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  WAD_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePriceChange(
    priceChange: PriceChangeDataStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  compareDecimals(
    x: BytesLike,
    y: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  convertDecimalToUInt(
    ratio: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertUIntToDecimal(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  divInt(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  fromWad(
    _wadValue: BigNumberish,
    _decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalancesAfterFees(
    reward: BigNumberish,
    shortBalance: BigNumberish,
    longBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getLossAmount(
    lossMultiplier: BytesLike,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLossMultiplier(
    ratio: BytesLike,
    direction: BigNumberish,
    leverage: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getMintAmount(
    tokenSupply: BigNumberish,
    amountIn: BigNumberish,
    balance: BigNumberish,
    shadowBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRatio(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWithdrawAmountOnBurn(
    tokenSupply: BigNumberish,
    amountIn: BigNumberish,
    balance: BigNumberish,
    shadowBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isBeforeFrontRunningInterval(
    subjectTime: BigNumberish,
    lastPriceTimestamp: BigNumberish,
    updateInterval: BigNumberish,
    frontRunningInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multiplyDecimalByUInt(
    a: BytesLike,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  one(overrides?: CallOverrides): Promise<string>;

  zero(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    WAD_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePriceChange(
      priceChange: PriceChangeDataStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fromWad(
      _wadValue: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancesAfterFees(
      reward: BigNumberish,
      shortBalance: BigNumberish,
      longBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWithdrawAmountOnBurn(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBeforeFrontRunningInterval(
      subjectTime: BigNumberish,
      lastPriceTimestamp: BigNumberish,
      updateInterval: BigNumberish,
      frontRunningInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    one(overrides?: CallOverrides): Promise<string>;

    zero(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MAX_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    WAD_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePriceChange(
      priceChange: PriceChangeDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromWad(
      _wadValue: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancesAfterFees(
      reward: BigNumberish,
      shortBalance: BigNumberish,
      longBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawAmountOnBurn(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBeforeFrontRunningInterval(
      subjectTime: BigNumberish,
      lastPriceTimestamp: BigNumberish,
      updateInterval: BigNumberish,
      frontRunningInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    one(overrides?: CallOverrides): Promise<BigNumber>;

    zero(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WAD_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePriceChange(
      priceChange: PriceChangeDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compareDecimals(
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertDecimalToUInt(
      ratio: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertUIntToDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divInt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromWad(
      _wadValue: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalancesAfterFees(
      reward: BigNumberish,
      shortBalance: BigNumberish,
      longBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLossAmount(
      lossMultiplier: BytesLike,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLossMultiplier(
      ratio: BytesLike,
      direction: BigNumberish,
      leverage: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintAmount(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawAmountOnBurn(
      tokenSupply: BigNumberish,
      amountIn: BigNumberish,
      balance: BigNumberish,
      shadowBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBeforeFrontRunningInterval(
      subjectTime: BigNumberish,
      lastPriceTimestamp: BigNumberish,
      updateInterval: BigNumberish,
      frontRunningInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplyDecimalByUInt(
      a: BytesLike,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    one(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zero(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
