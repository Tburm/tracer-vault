/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type InitializationStruct = {
  _owner: string;
  _keeper: string;
  _oracleWrapper: string;
  _settlementEthOracle: string;
  _longToken: string;
  _shortToken: string;
  _poolCommitter: string;
  _poolName: string;
  _frontRunningInterval: BigNumberish;
  _updateInterval: BigNumberish;
  _fee: BigNumberish;
  _leverageAmount: BigNumberish;
  _feeAddress: string;
  _quoteToken: string;
};

export type InitializationStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  number,
  number,
  BigNumber,
  number,
  string,
  string
] & {
  _owner: string;
  _keeper: string;
  _oracleWrapper: string;
  _settlementEthOracle: string;
  _longToken: string;
  _shortToken: string;
  _poolCommitter: string;
  _poolName: string;
  _frontRunningInterval: number;
  _updateInterval: number;
  _fee: BigNumber;
  _leverageAmount: number;
  _feeAddress: string;
  _quoteToken: string;
};

export interface LeveragedPoolInterface extends utils.Interface {
  functions: {
    "balances()": FunctionFragment;
    "burnTokens(uint256,uint256,address)": FunctionFragment;
    "claimGovernance()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "frontRunningInterval()": FunctionFragment;
    "getOraclePrice()": FunctionFragment;
    "getUpkeepInformation()": FunctionFragment;
    "governance()": FunctionFragment;
    "governanceTransferInProgress()": FunctionFragment;
    "initialize((address,address,address,address,address,address,address,string,uint32,uint32,uint256,uint16,address,address))": FunctionFragment;
    "intervalPassed()": FunctionFragment;
    "keeper()": FunctionFragment;
    "lastPriceTimestamp()": FunctionFragment;
    "leverageAmount()": FunctionFragment;
    "longBalance()": FunctionFragment;
    "mintTokens(uint256,uint256,address)": FunctionFragment;
    "oracleWrapper()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "payKeeperFromBalances(address,uint256)": FunctionFragment;
    "poolCommitter()": FunctionFragment;
    "poolName()": FunctionFragment;
    "poolTokens()": FunctionFragment;
    "poolUpkeep(int256,int256)": FunctionFragment;
    "provisionalGovernance()": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "quoteTokenTransfer(address,uint256)": FunctionFragment;
    "quoteTokenTransferFrom(address,address,uint256)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setNewPoolBalances(uint256,uint256)": FunctionFragment;
    "settlementEthOracle()": FunctionFragment;
    "shortBalance()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "transferGovernance(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateFeeAddress(address)": FunctionFragment;
    "updateInterval()": FunctionFragment;
    "withdrawQuote()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balances", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnTokens",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frontRunningInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpkeepInformation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTransferInProgress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [InitializationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "intervalPassed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastPriceTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverageAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "longBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payKeeperFromBalances",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolCommitter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolUpkeep",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "provisionalGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNewPoolBalances",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementEthOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shortBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQuote",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "frontRunningInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpkeepInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceTransferInProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intervalPassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "longBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payKeeperFromBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCommitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolUpkeep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provisionalGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewPoolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementEthOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQuote",
    data: BytesLike
  ): Result;

  events: {
    "FeeAddressUpdated(address,address)": EventFragment;
    "GovernanceAddressChanged(address,address)": EventFragment;
    "KeeperAddressChanged(address,address)": EventFragment;
    "Paused()": EventFragment;
    "PoolInitialized(address,address,address,string)": EventFragment;
    "PoolRebalance(int256,int256)": EventFragment;
    "PriceChangeError(int256,int256)": EventFragment;
    "ProvisionalGovernanceChanged(address)": EventFragment;
    "Unpaused()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChangeError"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProvisionalGovernanceChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type FeeAddressUpdatedEvent = TypedEvent<
  [string, string],
  { oldAddress: string; newAddress: string }
>;

export type FeeAddressUpdatedEventFilter =
  TypedEventFilter<FeeAddressUpdatedEvent>;

export type GovernanceAddressChangedEvent = TypedEvent<
  [string, string],
  { oldAddress: string; newAddress: string }
>;

export type GovernanceAddressChangedEventFilter =
  TypedEventFilter<GovernanceAddressChangedEvent>;

export type KeeperAddressChangedEvent = TypedEvent<
  [string, string],
  { oldAddress: string; newAddress: string }
>;

export type KeeperAddressChangedEventFilter =
  TypedEventFilter<KeeperAddressChangedEvent>;

export type PausedEvent = TypedEvent<[], {}>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PoolInitializedEvent = TypedEvent<
  [string, string, string, string],
  {
    longToken: string;
    shortToken: string;
    quoteToken: string;
    poolName: string;
  }
>;

export type PoolInitializedEventFilter = TypedEventFilter<PoolInitializedEvent>;

export type PoolRebalanceEvent = TypedEvent<
  [BigNumber, BigNumber],
  { shortBalanceChange: BigNumber; longBalanceChange: BigNumber }
>;

export type PoolRebalanceEventFilter = TypedEventFilter<PoolRebalanceEvent>;

export type PriceChangeErrorEvent = TypedEvent<
  [BigNumber, BigNumber],
  { startPrice: BigNumber; endPrice: BigNumber }
>;

export type PriceChangeErrorEventFilter =
  TypedEventFilter<PriceChangeErrorEvent>;

export type ProvisionalGovernanceChangedEvent = TypedEvent<
  [string],
  { newAddress: string }
>;

export type ProvisionalGovernanceChangedEventFilter =
  TypedEventFilter<ProvisionalGovernanceChangedEvent>;

export type UnpausedEvent = TypedEvent<[], {}>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface LeveragedPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeveragedPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _shortBalance: BigNumber;
        _longBalance: BigNumber;
      }
    >;

    burnTokens(
      token: BigNumberish,
      amount: BigNumberish,
      burner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[string]>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    frontRunningInterval(overrides?: CallOverrides): Promise<[number]>;

    getOraclePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUpkeepInformation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        _latestPrice: BigNumber;
        _data: string;
        _lastPriceTimestamp: BigNumber;
        _updateInterval: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    governanceTransferInProgress(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      initialization: InitializationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intervalPassed(overrides?: CallOverrides): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastPriceTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    leverageAmount(overrides?: CallOverrides): Promise<[string]>;

    longBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintTokens(
      token: BigNumberish,
      amount: BigNumberish,
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleWrapper(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payKeeperFromBalances(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolCommitter(overrides?: CallOverrides): Promise<[string]>;

    poolName(overrides?: CallOverrides): Promise<[string]>;

    poolTokens(overrides?: CallOverrides): Promise<[[string, string]]>;

    poolUpkeep(
      _oldPrice: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    provisionalGovernance(overrides?: CallOverrides): Promise<[string]>;

    quoteToken(overrides?: CallOverrides): Promise<[string]>;

    quoteTokenTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteTokenTransferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewPoolBalances(
      _longBalance: BigNumberish,
      _shortBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlementEthOracle(overrides?: CallOverrides): Promise<[string]>;

    shortBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeAddress(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateInterval(overrides?: CallOverrides): Promise<[number]>;

    withdrawQuote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balances(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _shortBalance: BigNumber;
      _longBalance: BigNumber;
    }
  >;

  burnTokens(
    token: BigNumberish,
    amount: BigNumberish,
    burner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<string>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  frontRunningInterval(overrides?: CallOverrides): Promise<number>;

  getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

  getUpkeepInformation(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      _latestPrice: BigNumber;
      _data: string;
      _lastPriceTimestamp: BigNumber;
      _updateInterval: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  governanceTransferInProgress(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    initialization: InitializationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intervalPassed(overrides?: CallOverrides): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastPriceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  leverageAmount(overrides?: CallOverrides): Promise<string>;

  longBalance(overrides?: CallOverrides): Promise<BigNumber>;

  mintTokens(
    token: BigNumberish,
    amount: BigNumberish,
    minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleWrapper(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payKeeperFromBalances(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolCommitter(overrides?: CallOverrides): Promise<string>;

  poolName(overrides?: CallOverrides): Promise<string>;

  poolTokens(overrides?: CallOverrides): Promise<[string, string]>;

  poolUpkeep(
    _oldPrice: BigNumberish,
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  provisionalGovernance(overrides?: CallOverrides): Promise<string>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  quoteTokenTransfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteTokenTransferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewPoolBalances(
    _longBalance: BigNumberish,
    _shortBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlementEthOracle(overrides?: CallOverrides): Promise<string>;

  shortBalance(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeAddress(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateInterval(overrides?: CallOverrides): Promise<number>;

  withdrawQuote(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _shortBalance: BigNumber;
        _longBalance: BigNumber;
      }
    >;

    burnTokens(
      token: BigNumberish,
      amount: BigNumberish,
      burner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimGovernance(overrides?: CallOverrides): Promise<void>;

    fee(overrides?: CallOverrides): Promise<string>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    frontRunningInterval(overrides?: CallOverrides): Promise<number>;

    getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUpkeepInformation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        _latestPrice: BigNumber;
        _data: string;
        _lastPriceTimestamp: BigNumber;
        _updateInterval: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    governanceTransferInProgress(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      initialization: InitializationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    intervalPassed(overrides?: CallOverrides): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastPriceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    leverageAmount(overrides?: CallOverrides): Promise<string>;

    longBalance(overrides?: CallOverrides): Promise<BigNumber>;

    mintTokens(
      token: BigNumberish,
      amount: BigNumberish,
      minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleWrapper(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payKeeperFromBalances(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolCommitter(overrides?: CallOverrides): Promise<string>;

    poolName(overrides?: CallOverrides): Promise<string>;

    poolTokens(overrides?: CallOverrides): Promise<[string, string]>;

    poolUpkeep(
      _oldPrice: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    provisionalGovernance(overrides?: CallOverrides): Promise<string>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    quoteTokenTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    quoteTokenTransferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setNewPoolBalances(
      _longBalance: BigNumberish,
      _shortBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementEthOracle(overrides?: CallOverrides): Promise<string>;

    shortBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateFeeAddress(account: string, overrides?: CallOverrides): Promise<void>;

    updateInterval(overrides?: CallOverrides): Promise<number>;

    withdrawQuote(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FeeAddressUpdated(address,address)"(
      oldAddress?: string | null,
      newAddress?: string | null
    ): FeeAddressUpdatedEventFilter;
    FeeAddressUpdated(
      oldAddress?: string | null,
      newAddress?: string | null
    ): FeeAddressUpdatedEventFilter;

    "GovernanceAddressChanged(address,address)"(
      oldAddress?: string | null,
      newAddress?: string | null
    ): GovernanceAddressChangedEventFilter;
    GovernanceAddressChanged(
      oldAddress?: string | null,
      newAddress?: string | null
    ): GovernanceAddressChangedEventFilter;

    "KeeperAddressChanged(address,address)"(
      oldAddress?: string | null,
      newAddress?: string | null
    ): KeeperAddressChangedEventFilter;
    KeeperAddressChanged(
      oldAddress?: string | null,
      newAddress?: string | null
    ): KeeperAddressChangedEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "PoolInitialized(address,address,address,string)"(
      longToken?: string | null,
      shortToken?: string | null,
      quoteToken?: null,
      poolName?: null
    ): PoolInitializedEventFilter;
    PoolInitialized(
      longToken?: string | null,
      shortToken?: string | null,
      quoteToken?: null,
      poolName?: null
    ): PoolInitializedEventFilter;

    "PoolRebalance(int256,int256)"(
      shortBalanceChange?: null,
      longBalanceChange?: null
    ): PoolRebalanceEventFilter;
    PoolRebalance(
      shortBalanceChange?: null,
      longBalanceChange?: null
    ): PoolRebalanceEventFilter;

    "PriceChangeError(int256,int256)"(
      startPrice?: BigNumberish | null,
      endPrice?: BigNumberish | null
    ): PriceChangeErrorEventFilter;
    PriceChangeError(
      startPrice?: BigNumberish | null,
      endPrice?: BigNumberish | null
    ): PriceChangeErrorEventFilter;

    "ProvisionalGovernanceChanged(address)"(
      newAddress?: string | null
    ): ProvisionalGovernanceChangedEventFilter;
    ProvisionalGovernanceChanged(
      newAddress?: string | null
    ): ProvisionalGovernanceChangedEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;
  };

  estimateGas: {
    balances(overrides?: CallOverrides): Promise<BigNumber>;

    burnTokens(
      token: BigNumberish,
      amount: BigNumberish,
      burner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    frontRunningInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUpkeepInformation(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    governanceTransferInProgress(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialization: InitializationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intervalPassed(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastPriceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    leverageAmount(overrides?: CallOverrides): Promise<BigNumber>;

    longBalance(overrides?: CallOverrides): Promise<BigNumber>;

    mintTokens(
      token: BigNumberish,
      amount: BigNumberish,
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payKeeperFromBalances(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolCommitter(overrides?: CallOverrides): Promise<BigNumber>;

    poolName(overrides?: CallOverrides): Promise<BigNumber>;

    poolTokens(overrides?: CallOverrides): Promise<BigNumber>;

    poolUpkeep(
      _oldPrice: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    provisionalGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokenTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteTokenTransferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewPoolBalances(
      _longBalance: BigNumberish,
      _shortBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlementEthOracle(overrides?: CallOverrides): Promise<BigNumber>;

    shortBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeAddress(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateInterval(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawQuote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnTokens(
      token: BigNumberish,
      amount: BigNumberish,
      burner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frontRunningInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOraclePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpkeepInformation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceTransferInProgress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      initialization: InitializationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intervalPassed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPriceTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverageAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    longBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTokens(
      token: BigNumberish,
      amount: BigNumberish,
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payKeeperFromBalances(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolCommitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolUpkeep(
      _oldPrice: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    provisionalGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteTokenTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteTokenTransferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewPoolBalances(
      _longBalance: BigNumberish,
      _shortBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlementEthOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shortBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeAddress(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawQuote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
